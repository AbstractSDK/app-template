/**
* This file was automatically generated by @abstract-money/ts-codegen@0.35.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

export type ExecuteMsg = {
  base: BaseExecuteMsg;
} | {
  module: MyAppExecuteMsg;
} | {
  ibc_callback: IbcResponseMsg;
} | {
  module_ibc: ModuleIbcMsg;
} | {
  receive: Empty;
};
export type BaseExecuteMsg = {
  update_config: {
    ans_host_address?: string | null;
    version_control_address?: string | null;
  };
};
export type MyAppExecuteMsg = {
  update_config: {};
} | {
  increment: {};
} | {
  reset: {
    count: number;
  };
};
export type Binary = string;
export type CallbackResult = {
  query: {
    query: QueryRequestForEmpty;
    result: ResultOfArrayOfBinaryOrErrorResponse;
  };
} | {
  execute: {
    initiator_msg: Binary;
    result: ResultOfExecutionResponseOrString;
  };
} | {
  fatal_error: string;
};
export type QueryRequestForEmpty = {
  bank: BankQuery;
} | {
  custom: Empty;
} | {
  staking: StakingQuery;
} | {
  distribution: DistributionQuery;
} | {
  stargate: {
    data: Binary;
    path: string;
    [k: string]: unknown;
  };
} | {
  ibc: IbcQuery;
} | {
  wasm: WasmQuery;
};
export type BankQuery = {
  supply: {
    denom: string;
    [k: string]: unknown;
  };
} | {
  balance: {
    address: string;
    denom: string;
    [k: string]: unknown;
  };
} | {
  all_balances: {
    address: string;
    [k: string]: unknown;
  };
} | {
  denom_metadata: {
    denom: string;
    [k: string]: unknown;
  };
} | {
  all_denom_metadata: {
    pagination?: PageRequest | null;
    [k: string]: unknown;
  };
};
export type StakingQuery = {
  bonded_denom: {
    [k: string]: unknown;
  };
} | {
  all_delegations: {
    delegator: string;
    [k: string]: unknown;
  };
} | {
  delegation: {
    delegator: string;
    validator: string;
    [k: string]: unknown;
  };
} | {
  all_validators: {
    [k: string]: unknown;
  };
} | {
  validator: {
    address: string;
    [k: string]: unknown;
  };
};
export type DistributionQuery = {
  delegator_withdraw_address: {
    delegator_address: string;
    [k: string]: unknown;
  };
} | {
  delegation_rewards: {
    delegator_address: string;
    validator_address: string;
    [k: string]: unknown;
  };
} | {
  delegation_total_rewards: {
    delegator_address: string;
    [k: string]: unknown;
  };
} | {
  delegator_validators: {
    delegator_address: string;
    [k: string]: unknown;
  };
};
export type IbcQuery = {
  port_id: {
    [k: string]: unknown;
  };
} | {
  list_channels: {
    port_id?: string | null;
    [k: string]: unknown;
  };
} | {
  channel: {
    channel_id: string;
    port_id?: string | null;
    [k: string]: unknown;
  };
};
export type WasmQuery = {
  smart: {
    contract_addr: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  raw: {
    contract_addr: string;
    key: Binary;
    [k: string]: unknown;
  };
} | {
  contract_info: {
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  code_info: {
    code_id: number;
    [k: string]: unknown;
  };
};
export type ResultOfArrayOfBinaryOrErrorResponse = {
  Ok: Binary[];
  [k: string]: unknown;
} | {
  Err: ErrorResponse;
  [k: string]: unknown;
};
export type Uint64 = string;
export type ResultOfExecutionResponseOrString = {
  Ok: ExecutionResponse;
  [k: string]: unknown;
} | {
  Err: string;
  [k: string]: unknown;
};
export type ChainName = string;
export type Namespace = string;
export type ModuleVersion = "latest" | {
  version: string;
};
export interface IbcResponseMsg {
  id: string;
  msg?: Binary | null;
  result: CallbackResult;
}
export interface PageRequest {
  key?: Binary | null;
  limit: number;
  reverse: boolean;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface ErrorResponse {
  error: string;
  message_index: Uint64;
}
export interface ExecutionResponse {
  executed_by: string;
  result: SubMsgResponse[];
}
export interface SubMsgResponse {
  data?: Binary | null;
  events: Event[];
  [k: string]: unknown;
}
export interface Event {
  attributes: Attribute[];
  type: string;
  [k: string]: unknown;
}
export interface Attribute {
  key: string;
  value: string;
  [k: string]: unknown;
}
export interface ModuleIbcMsg {
  client_chain: ChainName;
  msg: Binary;
  source_module: ModuleInfo;
}
export interface ModuleInfo {
  name: string;
  namespace: Namespace;
  version: ModuleVersion;
}
export type Addr = string;
export interface InstantiateMsg {
  base: BaseInstantiateMsg;
  module: MyAppInstantiateMsg;
}
export interface BaseInstantiateMsg {
  account_base: AccountBase;
  ans_host_address: string;
  version_control_address: string;
}
export interface AccountBase {
  manager: Addr;
  proxy: Addr;
}
export interface MyAppInstantiateMsg {
  count: number;
}
export interface MigrateMsg {
  base: BaseMigrateMsg;
  module: MyAppMigrateMsg;
}
export interface BaseMigrateMsg {}
export interface MyAppMigrateMsg {}
export type QueryMsg = {
  base: BaseQueryMsg;
} | {
  module: MyAppQueryMsg;
};
export type BaseQueryMsg = {
  base_config: {};
} | {
  base_admin: {};
} | {
  module_data: {};
} | {
  top_level_owner: {};
};
export type MyAppQueryMsg = {
  config: {};
} | {
  count: {};
};