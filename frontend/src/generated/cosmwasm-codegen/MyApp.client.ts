/**
* This file was automatically generated by @abstract-money/ts-codegen@0.35.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient, ExecuteResult } from "@abstract-money/cli/cosmjs";
import { AbstractQueryClient, AbstractAccountQueryClient, AbstractAccountClient, AppExecuteMsg, AppExecuteMsgFactory, AbstractClient, AbstractAccountId } from "@abstract-money/core/legacy";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { ExecuteMsg, BaseExecuteMsg, MyAppExecuteMsg, Binary, CallbackResult, QueryRequestForEmpty, BankQuery, StakingQuery, DistributionQuery, IbcQuery, WasmQuery, ResultOfArrayOfBinaryOrErrorResponse, Uint64, ResultOfExecutionResponseOrString, ChainName, Namespace, ModuleVersion, IbcResponseMsg, PageRequest, Empty, ErrorResponse, ExecutionResponse, SubMsgResponse, Event, Attribute, ModuleIbcMsg, ModuleInfo, Addr, InstantiateMsg, BaseInstantiateMsg, AccountBase, MyAppInstantiateMsg, MigrateMsg, BaseMigrateMsg, MyAppMigrateMsg, QueryMsg, BaseQueryMsg, MyAppQueryMsg } from "./MyApp.types";
import { MyAppQueryMsgBuilder, MyAppExecuteMsgBuilder } from "./MyApp.message-builder";
export interface IMyAppAppQueryClient {
  moduleId: string;
  accountQueryClient: AbstractAccountQueryClient;
  _moduleAddress: string | undefined;
  base: (baseQueryMsg: BaseQueryMsg) => Promise<BaseResponse>;
  module: (myAppQueryMsg: MyAppQueryMsg) => Promise<ModuleResponse>;
  connectSigningClient: (signingClient: SigningCosmWasmClient, address: string) => MyAppAppClient;
  getAddress: () => Promise<string>;
}
export class MyAppAppQueryClient implements IMyAppAppQueryClient {
  accountQueryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    abstractQueryClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractQueryClient: AbstractQueryClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    this.accountQueryClient = new AbstractAccountQueryClient({
      abstract: abstractQueryClient,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.base = this.base.bind(this);
    this.module = this.module.bind(this);
  }

  base = async (baseQueryMsg: BaseQueryMsg): Promise<BaseResponse> => {
    return this._query(MyAppQueryMsgBuilder.base(baseQueryMsg));
  };
  module = async (myAppQueryMsg: MyAppQueryMsg): Promise<ModuleResponse> => {
    return this._query(MyAppQueryMsgBuilder.module(myAppQueryMsg));
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountQueryClient.getModuleAddress(this.moduleId);

      if (address === null) {
        throw new Error(`Module ${this.moduleId} not installed`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  connectSigningClient = (signingClient: SigningCosmWasmClient, address: string): MyAppAppClient => {
    return new MyAppAppClient({
      accountId: this.accountQueryClient.accountId,
      managerAddress: this.accountQueryClient.managerAddress,
      proxyAddress: this.accountQueryClient.proxyAddress,
      moduleId: this.moduleId,
      abstractClient: this.accountQueryClient.abstract.connectSigningClient(signingClient, address)
    });
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountQueryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg
    });
  };
}
export interface IMyAppAppClient extends IMyAppAppQueryClient {
  accountClient: AbstractAccountClient;
  base: (baseExecuteMsg: BaseExecuteMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  module: (myAppExecuteMsg: MyAppExecuteMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  ibcCallback: (ibcResponseMsg: IbcResponseMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  moduleIbc: (moduleIbcMsg: ModuleIbcMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receive: (empty: Empty, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MyAppAppClient extends MyAppAppQueryClient implements IMyAppAppClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.base = this.base.bind(this);
    this.module = this.module.bind(this);
    this.ibcCallback = this.ibcCallback.bind(this);
    this.moduleIbc = this.moduleIbc.bind(this);
    this.receive = this.receive.bind(this);
  }

  base = async (baseExecuteMsg: BaseExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(MyAppExecuteMsgBuilder.base(baseExecuteMsg), fee, memo, _funds);
  };
  module = async (myAppExecuteMsg: MyAppExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(MyAppExecuteMsgBuilder.module(myAppExecuteMsg), fee, memo, _funds);
  };
  ibcCallback = async (ibcResponseMsg: IbcResponseMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(MyAppExecuteMsgBuilder.ibcCallback(ibcResponseMsg), fee, memo, _funds);
  };
  moduleIbc = async (moduleIbcMsg: ModuleIbcMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(MyAppExecuteMsgBuilder.moduleIbc(moduleIbcMsg), fee, memo, _funds);
  };
  receive = async (empty: Empty, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(MyAppExecuteMsgBuilder.receive(empty), fee, memo, _funds);
  };
  _execute = async (msg: ExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await this.accountClient.abstract.client.execute(this.accountClient.sender, await this.getAddress(), moduleMsg, fee, memo, _funds);
  };
}