/**
* This file was automatically generated by @abstract-money/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@abstract-money/cli/cosmjs";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { Uint64, InstantiateMsg, Pair, ExecuteMsg, Binary, EvmMsgForString, HexBinary, Uint128, CallbackRequest, QueryMsg, Callback, ResultOfExecutionResponseOrString, SentPacketData, Msg, AckInfosResponse, AckInfo, ExecutionResponse, ExecuteResult, Packet, NullableString, NullablePair } from "./EvmNote.types";
import { EvmNoteAppQueryClient, EvmNoteAppClient } from "./EvmNote.client";
export const evmNoteQueryKeys = {
  contract: ([{
    contract: "evmNote"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...evmNoteQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  remoteAddress: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...evmNoteQueryKeys.address(contractAddress)[0],
    method: "remote_address",
    args
  }] as const),
  ackInfos: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...evmNoteQueryKeys.address(contractAddress)[0],
    method: "ack_infos",
    args
  }] as const)
};
export interface EvmNoteReactQuery<TResponse, TData = TResponse> {
  client: EvmNoteAppQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface EvmNoteAckInfosQuery<TData> extends EvmNoteReactQuery<AckInfosResponse, TData> {
  args: undefined | {
    limit?: number;
    startAfter?: number;
  };
}
export function useEvmNoteAckInfosQuery<TData = AckInfosResponse>({
  client,
  args,
  options
}: EvmNoteAckInfosQuery<TData>) {
  return useQuery<AckInfosResponse, Error, TData>(evmNoteQueryKeys.ackInfos(client?._moduleAddress, args), () => client && args ? client.ackInfos({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client or args")), { ...options, enabled: !!args &&  !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface EvmNoteRemoteAddressQuery<TData> extends EvmNoteReactQuery<NullableString, TData> {
  args: undefined | {
    localAddress: string;
  };
}
export function useEvmNoteRemoteAddressQuery<TData = NullableString>({
  client,
  args,
  options
}: EvmNoteRemoteAddressQuery<TData>) {
  return useQuery<NullableString, Error, TData>(evmNoteQueryKeys.remoteAddress(client?._moduleAddress, args), () => client && args ? client.remoteAddress({
    localAddress: args.localAddress
  }) : Promise.reject(new Error("Invalid client or args")), { ...options, enabled: !!args &&  !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface EvmNoteExecuteMutation {
  client: EvmNoteAppClient;
  msg: {
    callback?: CallbackRequest;
    msgs: EvmMsgForString[];
    timeoutSeconds: Uint64;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useEvmNoteExecuteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EvmNoteExecuteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, EvmNoteExecuteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.execute(msg, fee, memo, funds), options);
}