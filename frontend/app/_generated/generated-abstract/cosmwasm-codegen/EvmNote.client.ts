/**
* This file was automatically generated by @abstract-money/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient, ExecuteResult } from "@abstract-money/cli/cosmjs";
import { AbstractQueryClient, AbstractAccountQueryClient, AbstractAccountClient, AppExecuteMsg, AppExecuteMsgFactory, AdapterExecuteMsg, AdapterExecuteMsgFactory, AbstractClient, AbstractAccountId } from "@abstract-money/core/legacy";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { Uint64, InstantiateMsg, Pair, ExecuteMsg, Binary, EvmMsgForString, HexBinary, Uint128, CallbackRequest, QueryMsg, Callback, ResultOfExecutionResponseOrString, SentPacketData, Msg, AckInfosResponse, AckInfo, ExecutionResponse, ExecuteResult, Packet, NullableString, NullablePair } from "./EvmNote.types";
import { EvmNoteQueryMsgBuilder, EvmNoteExecuteMsgBuilder } from "./EvmNote.message-builder";
export interface IEvmNoteAppQueryClient {
  moduleId: string;
  accountQueryClient: AbstractAccountQueryClient;
  _moduleAddress: string | undefined;
  remoteAddress: (params: CamelCasedProperties<Extract<QueryMsg, {
    remote_address: unknown;
  }>["remote_address"]>) => Promise<NullableString>;
  ackInfos: (params: CamelCasedProperties<Extract<QueryMsg, {
    ack_infos: unknown;
  }>["ack_infos"]>) => Promise<AckInfosResponse>;
  connectSigningClient: (signingClient: SigningCosmWasmClient, address: string) => EvmNoteAppClient;
  getAddress: () => Promise<string>;
}
export class EvmNoteAppQueryClient implements IEvmNoteAppQueryClient {
  accountQueryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    abstractQueryClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractQueryClient: AbstractQueryClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    this.accountQueryClient = new AbstractAccountQueryClient({
      abstract: abstractQueryClient,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.remoteAddress = this.remoteAddress.bind(this);
    this.ackInfos = this.ackInfos.bind(this);
  }

  remoteAddress = async (params: CamelCasedProperties<Extract<QueryMsg, {
    remote_address: unknown;
  }>["remote_address"]>): Promise<NullableString> => {
    return this._query(EvmNoteQueryMsgBuilder.remoteAddress(params));
  };
  ackInfos = async (params: CamelCasedProperties<Extract<QueryMsg, {
    ack_infos: unknown;
  }>["ack_infos"]>): Promise<AckInfosResponse> => {
    return this._query(EvmNoteQueryMsgBuilder.ackInfos(params));
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountQueryClient.getModuleAddress(this.moduleId);

      if (address === null) {
        throw new Error(`Module ${this.moduleId} not installed`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  connectSigningClient = (signingClient: SigningCosmWasmClient, address: string): EvmNoteAppClient => {
    return new EvmNoteAppClient({
      accountId: this.accountQueryClient.accountId,
      managerAddress: this.accountQueryClient.managerAddress,
      proxyAddress: this.accountQueryClient.proxyAddress,
      moduleId: this.moduleId,
      abstractClient: this.accountQueryClient.abstract.connectSigningClient(signingClient, address)
    });
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountQueryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg
    });
  };
}
export interface IEvmNoteAppClient extends IEvmNoteAppQueryClient {
  accountClient: AbstractAccountClient;
  execute: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    execute: unknown;
  }>["execute"]>, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class EvmNoteAppClient extends EvmNoteAppQueryClient implements IEvmNoteAppClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.execute = this.execute.bind(this);
  }

  execute = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    execute: unknown;
  }>["execute"]>, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(EvmNoteExecuteMsgBuilder.execute(params), fee, memo, _funds);
  };
  _execute = async (msg: ExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await this.accountClient.abstract.client.execute(this.accountClient.sender, await this.getAddress(), moduleMsg, fee, memo, _funds);
  };
}