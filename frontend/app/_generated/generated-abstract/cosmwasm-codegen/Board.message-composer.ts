// @ts-nocheck
          /**
* This file was automatically generated by @abstract-money/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AppExecuteMsg, AppExecuteMsgFactory } from "@abstract-money/core";
import { InstantiateMsg, ExecuteMsg, QueryMsg, AccountTrace, ChainName, AccountId, MigrateMsg, ConfigResponse, Addr, ParticipantsResponse, StatusResponse, UserPositionResponse } from "./Board.types";
export interface BoardMsg {
contractAddress: string;
sender: string;
setStatus: ({
  status
}: {
  status: string;
}, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
updateConfig: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
join: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
rollDice: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class BoardMsgComposer implements BoardMsg {
sender: string;
contractAddress: string;

constructor(sender: string, contractAddress: string) {
  this.sender = sender;
  this.contractAddress = contractAddress;
  this.setStatus = this.setStatus.bind(this);
  this.updateConfig = this.updateConfig.bind(this);
  this.join = this.join.bind(this);
  this.rollDice = this.rollDice.bind(this);
}

setStatus = ({
  status
}: {
  status: string;
}, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    set_status: {
      status
    }
  };
  const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(moduleMsg)),
      funds: _funds
    })
  };
};
updateConfig = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    update_config: {}
  };
  const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(moduleMsg)),
      funds: _funds
    })
  };
};
join = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    join: {}
  };
  const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(moduleMsg)),
      funds: _funds
    })
  };
};
rollDice = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    roll_dice: {}
  };
  const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(moduleMsg)),
      funds: _funds
    })
  };
};
}