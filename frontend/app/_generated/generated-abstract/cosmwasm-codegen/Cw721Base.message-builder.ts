// @ts-nocheck
          /**
* This file was automatically generated by @abstract-money/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { InstantiateMsg, ExecuteMsg, Binary, Expiration, Timestamp, Uint64, Uint128, Action, Empty, Coin, QueryMsg, AllNftInfoResponseForEmpty, OwnerOfResponse, Approval, NftInfoResponseForEmpty, OperatorsResponse, TokensResponse, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, Null, NullableString, MinterResponse, NumTokensResponse, OperatorResponse, OwnershipForString } from "./Cw721Base.types";
import { CamelCasedProperties } from "type-fest";
export abstract class Cw721BaseExecuteMsgBuilder {
static transferNft = ({
  recipient,
  tokenId
}: CamelCasedProperties<Extract<ExecuteMsg, {
  transfer_nft: unknown;
}>["transfer_nft"]>): ExecuteMsg => {
  return {
    transfer_nft: ({
      recipient,
      token_id: tokenId
    } as const)
  };
};
static sendNft = ({
  contract,
  msg,
  tokenId
}: CamelCasedProperties<Extract<ExecuteMsg, {
  send_nft: unknown;
}>["send_nft"]>): ExecuteMsg => {
  return {
    send_nft: ({
      contract,
      msg,
      token_id: tokenId
    } as const)
  };
};
static approve = ({
  expires,
  spender,
  tokenId
}: CamelCasedProperties<Extract<ExecuteMsg, {
  approve: unknown;
}>["approve"]>): ExecuteMsg => {
  return {
    approve: ({
      expires,
      spender,
      token_id: tokenId
    } as const)
  };
};
static revoke = ({
  spender,
  tokenId
}: CamelCasedProperties<Extract<ExecuteMsg, {
  revoke: unknown;
}>["revoke"]>): ExecuteMsg => {
  return {
    revoke: ({
      spender,
      token_id: tokenId
    } as const)
  };
};
static approveAll = ({
  expires,
  operator
}: CamelCasedProperties<Extract<ExecuteMsg, {
  approve_all: unknown;
}>["approve_all"]>): ExecuteMsg => {
  return {
    approve_all: ({
      expires,
      operator
    } as const)
  };
};
static revokeAll = ({
  operator
}: CamelCasedProperties<Extract<ExecuteMsg, {
  revoke_all: unknown;
}>["revoke_all"]>): ExecuteMsg => {
  return {
    revoke_all: ({
      operator
    } as const)
  };
};
static mint = ({
  extension,
  owner,
  tokenId,
  tokenUri
}: CamelCasedProperties<Extract<ExecuteMsg, {
  mint: unknown;
}>["mint"]>): ExecuteMsg => {
  return {
    mint: ({
      extension,
      owner,
      token_id: tokenId,
      token_uri: tokenUri
    } as const)
  };
};
static burn = ({
  tokenId
}: CamelCasedProperties<Extract<ExecuteMsg, {
  burn: unknown;
}>["burn"]>): ExecuteMsg => {
  return {
    burn: ({
      token_id: tokenId
    } as const)
  };
};
static extension = ({
  msg
}: CamelCasedProperties<Extract<ExecuteMsg, {
  extension: unknown;
}>["extension"]>): ExecuteMsg => {
  return {
    extension: ({
      msg
    } as const)
  };
};
static setWithdrawAddress = ({
  address
}: CamelCasedProperties<Extract<ExecuteMsg, {
  set_withdraw_address: unknown;
}>["set_withdraw_address"]>): ExecuteMsg => {
  return {
    set_withdraw_address: ({
      address
    } as const)
  };
};
static removeWithdrawAddress = (): ExecuteMsg => {
  return {
    remove_withdraw_address: ({} as const)
  };
};
static withdrawFunds = ({
  amount
}: CamelCasedProperties<Extract<ExecuteMsg, {
  withdraw_funds: unknown;
}>["withdraw_funds"]>): ExecuteMsg => {
  return {
    withdraw_funds: ({
      amount
    } as const)
  };
};
static updateOwnership = (action: Action): ExecuteMsg => {
  return {
    update_ownership: action
  };
};
}
export abstract class Cw721BaseQueryMsgBuilder {
static ownerOf = ({
  includeExpired,
  tokenId
}: CamelCasedProperties<Extract<QueryMsg, {
  owner_of: unknown;
}>["owner_of"]>): QueryMsg => {
  return {
    owner_of: ({
      include_expired: includeExpired,
      token_id: tokenId
    } as const)
  };
};
static approval = ({
  includeExpired,
  spender,
  tokenId
}: CamelCasedProperties<Extract<QueryMsg, {
  approval: unknown;
}>["approval"]>): QueryMsg => {
  return {
    approval: ({
      include_expired: includeExpired,
      spender,
      token_id: tokenId
    } as const)
  };
};
static approvals = ({
  includeExpired,
  tokenId
}: CamelCasedProperties<Extract<QueryMsg, {
  approvals: unknown;
}>["approvals"]>): QueryMsg => {
  return {
    approvals: ({
      include_expired: includeExpired,
      token_id: tokenId
    } as const)
  };
};
static operator = ({
  includeExpired,
  operator,
  owner
}: CamelCasedProperties<Extract<QueryMsg, {
  operator: unknown;
}>["operator"]>): QueryMsg => {
  return {
    operator: ({
      include_expired: includeExpired,
      operator,
      owner
    } as const)
  };
};
static allOperators = ({
  includeExpired,
  limit,
  owner,
  startAfter
}: CamelCasedProperties<Extract<QueryMsg, {
  all_operators: unknown;
}>["all_operators"]>): QueryMsg => {
  return {
    all_operators: ({
      include_expired: includeExpired,
      limit,
      owner,
      start_after: startAfter
    } as const)
  };
};
static numTokens = (): QueryMsg => {
  return {
    num_tokens: ({} as const)
  };
};
static contractInfo = (): QueryMsg => {
  return {
    contract_info: ({} as const)
  };
};
static nftInfo = ({
  tokenId
}: CamelCasedProperties<Extract<QueryMsg, {
  nft_info: unknown;
}>["nft_info"]>): QueryMsg => {
  return {
    nft_info: ({
      token_id: tokenId
    } as const)
  };
};
static allNftInfo = ({
  includeExpired,
  tokenId
}: CamelCasedProperties<Extract<QueryMsg, {
  all_nft_info: unknown;
}>["all_nft_info"]>): QueryMsg => {
  return {
    all_nft_info: ({
      include_expired: includeExpired,
      token_id: tokenId
    } as const)
  };
};
static tokens = ({
  limit,
  owner,
  startAfter
}: CamelCasedProperties<Extract<QueryMsg, {
  tokens: unknown;
}>["tokens"]>): QueryMsg => {
  return {
    tokens: ({
      limit,
      owner,
      start_after: startAfter
    } as const)
  };
};
static allTokens = ({
  limit,
  startAfter
}: CamelCasedProperties<Extract<QueryMsg, {
  all_tokens: unknown;
}>["all_tokens"]>): QueryMsg => {
  return {
    all_tokens: ({
      limit,
      start_after: startAfter
    } as const)
  };
};
static minter = (): QueryMsg => {
  return {
    minter: ({} as const)
  };
};
static extension = ({
  msg
}: CamelCasedProperties<Extract<QueryMsg, {
  extension: unknown;
}>["extension"]>): QueryMsg => {
  return {
    extension: ({
      msg
    } as const)
  };
};
static getWithdrawAddress = (): QueryMsg => {
  return {
    get_withdraw_address: ({} as const)
  };
};
static ownership = (): QueryMsg => {
  return {
    ownership: ({} as const)
  };
};
}